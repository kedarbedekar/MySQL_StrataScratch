-- Question 1
-- Write a query to return the customer_name, product_name, and total_amount for each sale in the last 30 days.
-- Tables used: Customers, Products and Sales

-- Solution:

SELECT
  c.customer_name,
  p.product_name,
  s.total_amount
FROM customers c
  JOIN sales s ON c.customer_id = s.customer_id
  JOIN products p ON s.product_id = p.product_id
WHERE DATEDIFF(CURRENT_DATE(), sale_date) <= 30
ORDER BY s.total_amount DESC;

-- Question 2
-- Write a query to find the total revenue generated by each product category in the last year. The output should include the product category and the total revenue for that category.
-- Tables used: Product and Sales

-- Solution:

SELECT
  p.category,
  SUM(tota_amount) AS Total_Revenue
FROM products p 
  JOIN sales s ON p.product_id = s.product_id
WHERE YEAR(sale_date) = 2023
GROUP BY p.category
ORDER BY Total_Revenue DESC;

-- Alternatively

SELECT
  p.category,
  SUM(total_amount) AS Total_Revenue
FROM products p 
  JOIN sales s ON p.product_id = s.product_id
WHERE sale_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY p.category
ORDER BY Total_Revenue DESC;


-- Question 3
-- Write a query to return all customers who made purchases in 2023 and are located in the "West" region.
-- Tables used: customers, sales

-- Solution:

SELECT

c.customer_id,
c.customer_name,
c.sales_region,
c.sign_up_date,
s.sale_date
FROM customers c 
  JOIN sales s ON c.customer_id = s.customer_id
WHERE sale_date BETWEEN '2023-01-01' AND '2023-12-31'
AND sales_region = 'West'

-- Question 4
-- Write a query to display the total number of sales, total quantity sold, and total revenue for each customer. 
-- The result should include the customer_name, total sales, total quantity, and total revenue.
-- Tables used: customers, sales

SELECT
  c.customer_name,
  COUNT(s.sales_id) AS total_sales,
  SUM(s.quantity) AS total_quantity,
  SUM(s.total_amount) AS total_revenue
FROM customers c
  JOIN sales s ON c.customer_id = s.customer_id
GROUP BY c.customer_name
ORDER BY total_revenue DESC;

-- Question 5
-- Write a query to find the top 3 customers (by total revenue) in the year 2023.
-- Tables used: customers, sales

-- Solution:

WITH cte AS (
SELECT
  c.customer_id,
  c.customer_name,
  SUM(s.total_amount) AS total_revenue,
  RANK() OVER(ORDER BY SUM(s.total_amount) DESC) AS top_customers
FROM customers c
  JOIN sales s ON c.customer_id = s.customer_id
WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY c.customer_id, c.customer_name
)

SELECT
	customer_name,
	top_customers,
	total_revenue
FROM cte 
WHERE top_customers <= 3

-- Question 6
-- Write a query to rank products by their total sales quantity in 2023. 
-- The result should include the product_name, total quantity sold, and rank.
-- Tables used: products, sales

-- Solution:
SELECT
    p.product_name,
    SUM(s.quantity) AS total_sales_quantity,
    RANK() OVER(ORDER BY SUM(s.quantity) DESC) AS product_rank
FROM products p
	JOIN sales s ON p.product_id = s.product_id
WHERE s.sale_date BETWEEN '2023-01-01' AND '2023-12-31'
GROUP BY p.product_id, p.product_name

-- Question 7
-- Write a query that categorizes customers into "New" (if they signed up in the last 6 months) or "Existing" based on their sign_up_date. 
-- Include the customer_name, region, and category in the result.
-- Tables used: customers

-- Solution:
SELECT
	customer_name,
    sales_region,
    CASE
		WHEN sign_up_date >= DATE_ADD(CURRENT_DATE(), INTERVAL -6 MONTH) THEN 'New'
		ELSE 'Existing'
	END AS category
FROM customers;

-- Question 8
-- Write a query to return the month and year along with the total sales for each month for the last 12 months.
-- Tables used: sales

-- Solution:
SELECT
	YEAR(sale_date) AS Sale_year,
    MONTH(sale_date) AS Sale_month,
    SUM(total_amount) AS total_sales
FROM sales
WHERE sale_date >= DATE_ADD(CURRENT_DATE(), INTERVAL -12 MONTH)
GROUP BY YEAR(sale_date), MONTH(sale_date)
ORDER BY YEAR(sale_date), MONTH(sale_date);

-- Question 9
-- Write a query to return the product categories that generated more than $50,000 in revenue during the last 6 months.
-- Tables used: products, sales

-- Solution

SELECT
p.category,
SUM(total_amount) AS total_revenue
FROM products p
	JOIN sales s ON p.product_id = s.product_id
WHERE sale_date >= DATE_ADD(CURRENT_DATE(), INTERVAL -6 MONTH)
GROUP BY p.category
HAVING SUM(total_amount) > 50000
ORDER BY total_revenue DESC;

-- Question 10
-- Write a query to check for any sales where the total_amount doesnâ€™t match the expected value (i.e., quantity * price).
-- Tables used: sales

-- Solution

SELECT
s.sales_id,
CASE 
	WHEN s.quantity * p.price = s.total_amount THEN 'true'
    ELSE 'false'
END AS total_amount_check
FROM products p 
	JOIN sales s ON p.product_id = s.product_id;


